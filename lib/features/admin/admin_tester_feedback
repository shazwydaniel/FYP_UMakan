import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:fyp_umakan/features/student_management/controllers/user_controller.dart';
import 'package:fyp_umakan/utils/constants/colors.dart';

class TesterQuestionsPage extends StatefulWidget {
  @override
  State<TesterQuestionsPage> createState() => _TesterQuestionsPageState();
}

class _TesterQuestionsPageState extends State<TesterQuestionsPage> {
  final userController = Get.find<UserController>();

  final List<Map<String, dynamic>> questions = [
    {
      'type': 'slider',
      'question': "1. How easy was it to find and open the Community section in the UMakan app?",
    },
    {
      'type': 'yesno',
      'question': "2. When you created a new post, did you clearly see how to mark your food as Available or Taken?",
      'hint': "If no, what was unclear?"
    },
    {
      'type': 'slider',
      'question': "3. How straightforward was entering your food details (name, quantity, notes) when posting?",
    },
    {
      'type': 'yesno',
      'question': "4. When browsing other peopleâ€™s posts, did you find it easy to switch between List view and Map view?",
      'hint': "If no, what would make switching views easier?"
    },
    {
      'type': 'slider',
      'question': "5. Were the filter options (food category, distance, availability) helpful in finding what you wanted?",
      'hint': "Which filter would you add or improve?"
    },
    {
      'type': 'yesno',
      'question': "6. Once you claimed a food item, was it clear how to update your post to Taken or remove it?",
      'hint': "Suggestions for improvement?"
    },
    {
      'type': 'yesno',
      'question': "7. Did you receive a notification when someone claimed your food, or when a new post matched your preferences?",
      'hint': "If no, what kind of alert would you prefer?"
    },
    {
      'type': 'slider',
      'question': "8. How easy was it to contact the poster directly (in-app chat or call button) after finding a post you liked?",
    },
    {
      'type': 'yesno',
      'question': "9. Did the sorting options (newest first, closest first, soonest expiring) help you find posts faster?",
      'hint': "Which sorting option did you use most often?"
    },
    {
      'type': 'text',
      'question': "10. What one change or new feature would make the Community page more useful for you?",
    },
  ];

  final Map<int, double> sliderAnswers = {};
  final Map<int, String> yesNoAnswers = {};
  final Map<int, TextEditingController> followUpControllers = {};
  final Map<int, TextEditingController> textAnswers = {};

  @override
  void initState() {
    super.initState();
    for (int i = 0; i < questions.length; i++) {
      final q = questions[i];
      if (q['type'] == 'slider') {
        sliderAnswers[i] = 3;
      } else if (q['type'] == 'yesno') {
        followUpControllers[i] = TextEditingController();
      } else if (q['type'] == 'text') {
        textAnswers[i] = TextEditingController();
      }
    }
  }

  @override
  void dispose() {
    for (var controller in followUpControllers.values) {
      controller.dispose();
    }
    for (var controller in textAnswers.values) {
      controller.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: TColors.teal,
      appBar: AppBar(
        backgroundColor: TColors.teal,
        title: Text("UMakan Community Survey", style: TextStyle(color: TColors.cream)),
        iconTheme: IconThemeData(color: TColors.cream),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            Expanded(
              child: ListView.builder(
                itemCount: questions.length,
                itemBuilder: (context, index) {
                  final question = questions[index];
                  final type = question['type'];
                  return Padding(
                    padding: const EdgeInsets.only(bottom: 20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          question['question'],
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.black),
                        ),
                        const SizedBox(height: 10),
                        if (type == 'slider') ...[
                          Slider(
                            value: sliderAnswers[index]!,
                            onChanged: (val) {
                              setState(() {
                                sliderAnswers[index] = val;
                              });
                            },
                            min: 1,
                            max: 5,
                            divisions: 4,
                            label: sliderAnswers[index]!.toStringAsFixed(0),
                            activeColor: Colors.black,
                            inactiveColor: Colors.black26,
                          ),
                          Text(
                            "Rating: ${sliderAnswers[index]!.toStringAsFixed(0)} / 5",
                            style: TextStyle(color: Colors.white),
                          ),
                          if (question['hint'] != null)
                            TextField(
                              controller: followUpControllers[index] ??= TextEditingController(),
                              decoration: InputDecoration(
                                hintText: question['hint'],
                                filled: true,
                                fillColor: TColors.cream,
                                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                              ),
                            ),
                        ] else if (type == 'yesno') ...[
                          Row(
                            children: ['Yes', 'No'].map((option) {
                              return Expanded(
                                child: Container(
                                  margin: EdgeInsets.symmetric(horizontal: 4),
                                  decoration: BoxDecoration(
                                    color: TColors.cream,
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(color: Colors.black12),
                                  ),
                                  child: RadioListTile<String>(
                                    title: Text(option),
                                    value: option,
                                    groupValue: yesNoAnswers[index],
                                    onChanged: (value) {
                                      setState(() {
                                        yesNoAnswers[index] = value!;
                                      });
                                    },
                                    activeColor: Colors.black,
                                    contentPadding: EdgeInsets.symmetric(horizontal: 12),
                                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                                  ),
                                ),
                              );
                            }).toList(),
                          ),
                          if (yesNoAnswers[index] == 'No')
                            TextField(
                              controller: followUpControllers[index] ??= TextEditingController(),
                              decoration: InputDecoration(
                                hintText: question['hint'],
                                filled: true,
                                fillColor: TColors.cream,
                                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                              ),
                            ),
                        ] else if (type == 'text') ...[
                          TextField(
                            controller: textAnswers[index]!,
                            maxLines: 3,
                            decoration: InputDecoration(
                              filled: true,
                              fillColor: TColors.cream,
                              hintText: "Your suggestion...",
                              border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                            ),
                          ),
                        ]
                      ],
                    ),
                  );
                },
              ),
            ),
            ElevatedButton(
              onPressed: _submitResponses,
              style: ElevatedButton.styleFrom(
                backgroundColor: TColors.cream,
                padding: EdgeInsets.symmetric(vertical: 15),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              child: Text(
                "Submit Survey",
                style: TextStyle(color: TColors.teal, fontWeight: FontWeight.bold),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _submitResponses() async {
    // Check for all yes/no answered
    for (int i = 0; i < questions.length; i++) {
      if (questions[i]['type'] == 'yesno' && yesNoAnswers[i] == null) {
        Get.snackbar(
          "Incomplete",
          "Please answer all Yes/No questions.",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.red,
          colorText: Colors.white,
        );
        return;
      }
    }

    Map<String, dynamic> data = {
      'userId': userController.user.value.id,
      'username': userController.user.value.username,
      'timestamp': Timestamp.now(),
    };

    for (int i = 0; i < questions.length; i++) {
      final q = questions[i];
      final type = q['type'];
      if (type == 'slider') {
        data['Q${i + 1}'] = {
          'question': q['question'],
          'answer': sliderAnswers[i]!.toStringAsFixed(0),
          'details': q['hint'] != null ? followUpControllers[i]?.text.trim() : null,
        };
      } else if (type == 'yesno') {
        data['Q${i + 1}'] = {
          'question': q['question'],
          'answer': yesNoAnswers[i],
          'details': followUpControllers[i]?.text.trim() ?? '',
        };
      } else if (type == 'text') {
        data['Q${i + 1}'] = {
          'question': q['question'],
          'answer': textAnswers[i]?.text.trim(),
        };
      }
    }

    await FirebaseFirestore.instance
        .collection("Admins")
        .doc("communitySurvey")
        .collection("responses")
        .add(data);

    Get.snackbar("Thank you!", "Your responses have been submitted.",
        snackPosition: SnackPosition.BOTTOM, backgroundColor: Colors.green, colorText: Colors.white);

    // Clear
    for (var c in followUpControllers.values) c.clear();
    for (var c in textAnswers.values) c.clear();
    setState(() {
      yesNoAnswers.clear();
      sliderAnswers.updateAll((key, _) => 3);
    });
  }
}
